# Language setting
language: node_js

# Version number
node_js:
  - 8.2.1

env:
  global:
    - XUNIT_FILE=$SHIPPABLE_BUILD_DIR/shippable/testresults/result.xml API_PORT=80

build:
  ci:
    # create directories needed for unit tests and code coverage
    - mkdir -p $SHIPPABLE_BUILD_DIR/shippable/testresults
    - mkdir -p $SHIPPABLE_BUILD_DIR/shippable/codecoverage
    # run a script that detects if any microservice code has changed and tests,
    # builds and publishes the docker image to ECR
    - |
      if [ "$IS_PULL_REQUEST" != true ]; then
        ./detect-changed-services.sh
      else
        echo "skipping because it's a PR"
      fi

# ECR subscription integration that automatically does a docker login into ECR
# using credentials specified in the account integration
integrations:
  hub:
    - integrationName: aws
      type: amazonKeys
      region: "eu-west-1"
      branches:
        only:
          - master
    - integrationName: integration2
      type: amazonKeys
      region: "eu-west-1"
      branches:
        except:
          - master
  notifications:
    - integrationName: slack
      type: slack
      recipients:
        - "#channelOne"
      branches:
        only:
          - master
      on_success: always
      on_failure: always

resources:
  - name: alice_img
    type: image
    integration: aws
    pointer:
      sourceName: "316425403378.dkr.ecr.eu-west-1.amazonaws.com/alice"
    seed:
      versionName: "master.1"

  - name: bob_img
    type: image
    integration: aws
    pointer:
      sourceName: "316425403378.dkr.ecr.eu-west-1.amazonaws.com/bob"
    seed:
      versionName: "master.1"

  - name: alice_img_feature
    type: image
    integration: aws
    pointer:
      sourceName: "316425403378.dkr.ecr.eu-west-1.amazonaws.com/alice_feature"
    seed:
      versionName: "feature.1"

  - name: bob_img_feature
    type: image
    integration: aws
    pointer:
      sourceName: "316425403378.dkr.ecr.eu-west-1.amazonaws.com/bob_feature"
    seed:
      versionName: "feature.1"

  - name: deploy-ecs-params
    type: params
    version:
      params:
        PORT: 80
        ENVIRONMENT: "dev"

  - name: deploy-ecs-docker-options
    type: dockerOptions
    versionTemplate:
      linuxParameters:
        initProcessEnabled: true
      memory: 100
      portMappings:
        - 80:80

  - name: deploy-ecs-replicas
    type: replicas
    version:
      count: 1

  - name: ecs_cluster
    type: cluster
    integration: aws
    pointer:
      sourceName : "codefreshCluster-ECSCluster-1KW7G556ZKQFG" #name of the cluster to which we are deploying
      region: "eu-west-1"
 
jobs:
  - name: app-mono_runCI
    type: runCI
    steps:
       - OUT: alice_img
       - OUT: bob_img
       - OUT: alice_img_feature
       - OUT: bob_img_feature

  - name: micro_alice_def
    type: manifest
    steps:
     - IN: alice_img

  - name: micro_bob_def
    type: manifest
    steps:
     - IN: bob_img

  # - name: app_deploy
  #   type: deployconfig
  #   method: replace
  #   steps:
  #     - IN: micro_alice_def
  #     - IN: micro_bob_def
  #     - IN: ecs_cluster

  - name: deploy-ecs-manifest
    type: manifest
    steps:
     - IN: alice_img
     - IN: deploy-ecs-docker-options
     - IN: deploy-ecs-params
     - IN: deploy-ecs-replicas

  - name: deploy-ecs-deploy
    type: deploy
    steps:
      - IN: deploy-ecs-manifest
      - IN: ecs_cluster
      - TASK: managed
        deployMethod: replace
